{"ast":null,"code":"var _jsxFileName = \"/home/jhlee/workspace/chat/insta-chat/client/src/Components/Chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\nimport InfoBar from \"../Infobar/Infobar\";\nimport Input from \"../Input/Input\";\nimport \"./Chat.css\";\nimport Messages from \"../Messages/Messages\";\nimport TextContainer from \"../TextContainer/TextContainer\";\nimport { connect, sendMsg } from '../../Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\n\nfunction Chat({\n  location\n}) {\n  _s();\n\n  const ENDPOINT = \"http://127.0.0.1:8080\";\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]); // useEffect 안에서 사용하는 상태나, props 가 있다면, useEffect 의 deps 에 넣어주어야 합니다. 그렇게 하는게, 규칙입니다.\n  // 만약 useEffect 안에서 사용하는 상태나 props 를 deps 에 넣지 않게 된다면 useEffect 에 등록한 함수가 실행 될 때,\n  // 최신 props/상태를 가르키지 않게 됩니다.\n\n  useEffect(() => {\n    // 컴포넌트가 화면에서 나타남\n    socket = new WebSocket(\"ws://localhost:8080/ws\");\n    console.log(\"socket create...\");\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    setRoom(room);\n    setName(name);\n    console.log(\"room: %s, name: %s\", room, name);\n\n    socket.onopen = function (event) {\n      console.log(\"[onopen] successfully connected...\");\n    }; // 컴포넌트가 화면에서 사라짐\n\n\n    return () => {\n      socket.close(1000, \"socket close...\");\n      console.log(\"socket close...\");\n    };\n  }, [location.search]);\n  useEffect(() => {\n    socket.onmessage = function (event) {\n      let message = event.data;\n      console.log(\"[onmessage] received message...\");\n      console.log(message);\n      setMessages(...messages, event.data);\n    };\n  }, [messages]);\n  /*\n  useEffect(() => {\n    socket.on(\"message\", (message) => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]);\n   useEffect(() => {\n    socket.on(\"roomData\", ({users}) =>{\n      setUsers(users)\n    });\n  },[])\n   function sendMessage(event) {\n    event.preventDefault();\n    if (message) {\n      socket.emit(\"sendMessage\", message, () => {\n        setMessage(\"\");\n      });\n    }\n  }\n  */\n\n  function sendMessage(event) {\n    if (event.keyCode === 13) {\n      console.log(message);\n      sendMsg(message);\n      setMessage(\"\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(InfoBar, {\n        room: room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages,\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        message: message,\n        sendMessage: sendMessage,\n        setMessage: setMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chat, \"02o8zN4s2pPHz/oSyXI1+3VEWVo=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/home/jhlee/workspace/chat/insta-chat/client/src/Components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","InfoBar","Input","Messages","TextContainer","connect","sendMsg","socket","Chat","location","ENDPOINT","name","setName","room","setRoom","message","setMessage","messages","setMessages","users","setUsers","WebSocket","console","log","parse","search","onopen","event","close","onmessage","data","sendMessage","keyCode"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\nimport InfoBar from \"../Infobar/Infobar\";\nimport Input from \"../Input/Input\";\nimport \"./Chat.css\";\nimport Messages from \"../Messages/Messages\";\nimport TextContainer from \"../TextContainer/TextContainer\"\n\nimport { connect, sendMsg } from '../../Api';\n\nlet socket;\n\nfunction Chat({ location }) {\n    const ENDPOINT = \"http://127.0.0.1:8080\";\n    const [name, setName] = useState(\"\");\n    const [room, setRoom] = useState(\"\");\n    const [message, setMessage] = useState(\"\");\n    const [messages, setMessages] = useState([]);\n    const [users, setUsers] = useState([]);\n\n    // useEffect 안에서 사용하는 상태나, props 가 있다면, useEffect 의 deps 에 넣어주어야 합니다. 그렇게 하는게, 규칙입니다.\n    // 만약 useEffect 안에서 사용하는 상태나 props 를 deps 에 넣지 않게 된다면 useEffect 에 등록한 함수가 실행 될 때,\n    // 최신 props/상태를 가르키지 않게 됩니다.\n    useEffect(() => {\n        // 컴포넌트가 화면에서 나타남\n        socket = new WebSocket(\"ws://localhost:8080/ws\");\n        console.log(\"socket create...\");\n        \n        const { name, room } = queryString.parse(location.search);    \n        setRoom(room);\n        setName(name);\n        console.log(\"room: %s, name: %s\", room, name);\n    \n        socket.onopen = function(event) {\n            console.log(\"[onopen] successfully connected...\");\n        };\n\n        // 컴포넌트가 화면에서 사라짐\n        return () => {\n            socket.close(1000, \"socket close...\");\n            console.log(\"socket close...\");\n        };\n    }, [location.search]);\n\n    useEffect(() => {\n        socket.onmessage  = function(event) {\n            let message = event.data;\n            console.log(\"[onmessage] received message...\");\n            console.log(message);\n            setMessages(...messages, event.data);\n        };\n    }, [messages]);\n\n  /*\n  useEffect(() => {\n    socket.on(\"message\", (message) => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]);\n\n  useEffect(() => {\n    socket.on(\"roomData\", ({users}) =>{\n      setUsers(users)\n    });\n  },[])\n\n  function sendMessage(event) {\n    event.preventDefault();\n    if (message) {\n      socket.emit(\"sendMessage\", message, () => {\n        setMessage(\"\");\n      });\n    }\n  }\n  */\n\n  function sendMessage(event) {\n    if (event.keyCode === 13) {\n    console.log(message);\n      sendMsg(message);\n      setMessage(\"\");\n    }\n  }\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n        <InfoBar room={room} />\n        <Messages messages={messages} name={name} />\n        <Input\n          message={message}\n          sendMessage={sendMessage}\n          setMessage={setMessage}\n        ></Input>\n      </div>\n      <TextContainer users = {users} />\n\n    </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}